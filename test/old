#*
## example basic power block
block power int int int -> int
    result base iters
    iters - 1
    base * base
    result = base
    if iters > 0
    | return power base iters
    return result
end

block main void -> int
    print "this is a test script for testing purposes :)\n"
    print "\n"

    hello = "hello world\n"

    print "Variable declaration: "

    a = 10
    print a

    b = a
    b + 10
    print "Addition: "
    print b

    b * 2
    print "Multiplication: "
    print b

    b / 2
    print "Division: "
    print b

    b - 2 
    print "Subtraction: "
    print b

    print hello
    return 0
end
*#

%define sys_brk 0x1000

bluescript2_generic_print: 
    ; string in rax
    push rax
    mov  rbx, 0

    .print_loop:
        inc rax
        inc rbx
        mov cl, [rax]
        cmp cl, 0
        jne .print_loop
        
        mov rax, 1
        mov rdi, 1
        pop rsi 
        mov rdx, rbx
        syscall
    ret

bluescript2_numeric_print:
    ; number is in rax
    ; print the number

    mov rcx, digitSpace
    mov rbx, 10 
    mov [rcx], rbx
    inc rcx
    mov [digitSpacePos], rcx

    ._printLoop: 
        mov rdx, 0  ; stops rdx from being concatenated
        mov rbx, 10
        div rbx
        push rax
        add rdx, 48

        mov rcx, [digitSpacePos]
        mov [rcx], dl ; load the character
        inc rcx 
        mov [digitSpacePos], rcx

        pop rax
        cmp rax, 0
        jne ._printLoop

    ._printLoop2:
        ; print the number in reverse
        mov rcx, [digitSpacePos]
        
        ; the printing
        mov rax, 1
        mov rdi, 1
        mov rsi, rcx
        mov rdx, 1
        syscall 

        ; load the next character
        mov rcx, [digitSpacePos]
        dec rcx
        mov [digitSpacePos], rcx

        ; check if we are at the end
        cmp rcx, digitSpace
        jge ._printLoop2
    ret

bluescript2_generic_input:
    ; rsi = buffer        
    ; rdx = buffer size   
    mov rax, 0            
    mov rdi, 0              
    syscall               
    ret          